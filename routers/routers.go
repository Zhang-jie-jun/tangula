package routers

import (
	"github.com/Zhang-jie-jun/tangula/contants"
	_ "github.com/Zhang-jie-jun/tangula/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/Zhang-jie-jun/tangula/middleware/cors"
	"github.com/Zhang-jie-jun/tangula/middleware/jwt"
	"github.com/Zhang-jie-jun/tangula/middleware/logger"
	"github.com/Zhang-jie-jun/tangula/pkg/msg"
	"github.com/Zhang-jie-jun/tangula/routers/api"
	"github.com/Zhang-jie-jun/tangula/service/websockets"
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"net/http"
)

func InitRouter() *gin.Engine {
	gin.SetMode(contants.AppCfg.System.RunMode)
	router := gin.New()
	router.Use(gin.Recovery())
	router.Use(logger.Logger())
	router.Use(cors.CorsHandler())
	// 超级管理员授权
	//var superAdminMiddleware = jwt.JWTMiddlewareInit(&jwt.SuperAdminAuthorizator{})
	// 系统管理员授权
	var adminMiddleware = jwt.JWTMiddlewareInit(&jwt.AdminAuthorizator{})
	// 普通用户授权
	var authMiddleware = jwt.JWTMiddlewareInit(&jwt.UserAuthorizator{})
	// 未定义url处理(404)
	router.NoRoute(authMiddleware.MiddlewareFunc(), func(c *gin.Context) {
		statusCode := msg.URL_NOT_FOUND
		c.JSON(http.StatusNotFound, gin.H{"code": statusCode, "message": msg.GetMsg(statusCode)})
	})
	router.GET("/replica", func(c *gin.Context) {
		websockets.WsEndpoint(c.Writer, c.Request)
	})
	router.GET("/home", func(c *gin.Context) {
		websockets.WsServer(c.Writer, c.Request)
	})

	//对外接口，不需要登录授权
	router.POST("/tangula/updDeploy", func(c *gin.Context) {
		api.UpdDeploy(c)
	})
	router.GET("/vmFileRecovery/report", func(c *gin.Context) {
		api.GetVmFileRecoveryReport(c)
	})

	router.GET("/docs/api/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	router.POST("/login", authMiddleware.LoginHandler)
	router.POST("/logout", authMiddleware.LogoutHandler)
	// 授权认证分组
	authGroup := router.Group("/auth")
	authGroup.Use(authMiddleware.MiddlewareFunc())
	{
		authGroup.GET("/user", api.GetUserInfo)
		authGroup.GET("/token", authMiddleware.RefreshHandler)
		// 超级管理员与系统管理员可以启用、禁用用户、获取所有用户、编辑用户权限、获取角色列表
		authGroup.GET("/user/:id", adminMiddleware.MiddlewareFunc(), api.GetAssignUserInfo)
		authGroup.GET("/users", adminMiddleware.MiddlewareFunc(), api.GetUserList)
		authGroup.PUT("/user/:id/set_role", adminMiddleware.MiddlewareFunc(), api.SetUserRole)
		authGroup.GET("/role", adminMiddleware.MiddlewareFunc(), api.GetRoleList)

		authGroup.PUT("/user/:id/enable", adminMiddleware.MiddlewareFunc(), api.EnableUser)
		authGroup.PUT("/user/:id/disable", adminMiddleware.MiddlewareFunc(), api.DisableUser)
	}
	// 资源管理分组
	resourceGroup := router.Group("/resource")
	resourceGroup.Use(authMiddleware.MiddlewareFunc())
	{
		// 平台管理
		{
			resourceGroup.GET("/platform/support", api.GetPlatformSupportType)
			resourceGroup.POST("/platform", api.CreatePlatform)
			resourceGroup.GET("/platform", api.GetPlatform)
			resourceGroup.GET("/platform/:id", api.GetPlatformById)
			resourceGroup.PUT("/platform/:id", api.EditPlatform)
			resourceGroup.POST("/platform/:id/publish", api.PublishPlatform)
			resourceGroup.DELETE("/platform/:id", api.DeletePlatform)
			resourceGroup.GET("/platform/:id/vmware/datasources", api.GetVMwareDataSources)
			resourceGroup.GET("/platform/:id/vmware/hostsByPath", api.GetVMwareHostsByPath)

			resourceGroup.GET("/platform/cas/vms", api.GetCasVm)
			resourceGroup.GET("/platform/cas/storages", api.GetCasStorage)
			resourceGroup.GET("/platform/:id/cas/hosts", api.GetCasHostList)
			resourceGroup.GET("/platform/:id/cas/hostInfo", api.GetCasHostInfo)

			resourceGroup.GET("/platform/:id/fusioncompute/hosts", api.GetFcHostList)
		}
		// 云平台租户管理
		{
			resourceGroup.POST("/platform/tenant", api.CreatePlatformTenant)
			resourceGroup.GET("/platform/{id}/tenant", api.GetPlatformTenant)
			resourceGroup.GET("/platform/tenant/:id", api.GetPlatformTenantById)
			resourceGroup.PUT("/platform/tenant/:id", api.EditPlatformTenant)
			resourceGroup.DELETE("/platform/tenant/:id", api.DeletePlatformTenant)
		}
		// 主机管理
		{
			resourceGroup.GET("/host/support", api.GetHostSupportType)
			resourceGroup.POST("/host", api.CreateHost)
			resourceGroup.GET("/host", api.GetHost)
			resourceGroup.GET("/host/:id", api.GetHostById)
			resourceGroup.PUT("/host/:id", api.EditHost)
			resourceGroup.POST("/host/:id/publish", api.PublishHost)
			resourceGroup.DELETE("/host/:id", api.DeleteHost)
			resourceGroup.POST("/host/:id/update", api.UpdateHost)
			resourceGroup.POST("/host/deployClient", api.DeployApp)
			resourceGroup.GET("/host/deployRecord/:id", api.GetDeployRecord)

		}
		// 存储池管理
		{
			// 超级管理员与系统管理员可以创建、删除存储池
			resourceGroup.POST("/store_pool", adminMiddleware.MiddlewareFunc(), api.CreateStorePool)
			resourceGroup.DELETE("/store_pool/:id", adminMiddleware.MiddlewareFunc(), api.DeleteStorePool)
			resourceGroup.GET("/store_pool", api.GetStorePool)
			resourceGroup.GET("/store_pool/:id", api.GetStorePoolById)
		}
	}
	// 数据管理分组
	dataGroup := router.Group("/store_pool")
	dataGroup.Use(authMiddleware.MiddlewareFunc())
	{
		// 镜像管理
		{
			dataGroup.GET("/image", api.GetImage)
			dataGroup.GET("/image/:id", api.GetImageById)
			dataGroup.POST("/image/:id/replica", api.CreateReplicaByImage)
			dataGroup.POST("/image/:id/publish", api.PublishImage)
			dataGroup.DELETE("/image/:id", api.DeleteImage)
			dataGroup.PUT("/image/:id", api.EditImage)
		}
		// 副本管理
		{
			dataGroup.GET("/replica/support", api.GetReplicaSupportType)
			dataGroup.GET("/replica/mount_type", api.GetReplicaMountType)
			dataGroup.POST("/replica", api.CreateReplica)
			dataGroup.PUT("/replica/:id", api.EditReplica)
			dataGroup.GET("/replica", api.GetReplica)
			dataGroup.GET("/replica/:id", api.GetReplicaById)
			dataGroup.POST("/replica/:id/image", api.CreateImageByReplica)
			dataGroup.POST("/replica/:id/snapshot", api.CreateSnapshotByReplica)
			dataGroup.GET("/replica/:id/snapshot", api.GetSnapshotByReplica)
			dataGroup.DELETE("/replica/:id/snapshot", api.DeleteSnapshotByReplica)
			dataGroup.DELETE("/replica/:id", api.DeleteReplica)
			dataGroup.DELETE("/replica/batch", api.DeleteReplicaBatch)

			dataGroup.POST("/replica/mount", api.MountReplica)
			dataGroup.POST("/replica/batch/mount", api.BatchMountReplica)
			dataGroup.POST("/replica/:id/unmount", api.UnMountReplica)
			dataGroup.POST("/replica/batch/unmount", api.UnMountReplicaBatch)
			dataGroup.GET("/replica/:id/mount/instance", api.GetInstances)
			dataGroup.GET("/replica/mount/instance/:id/logs", api.GetInstanceLogs)
			dataGroup.POST("/replica/uploadFile", api.UploadFile)
			dataGroup.POST("/replica/doCompability", api.DoCompability)

		}
		// 副本快照管理
		{
			dataGroup.GET("/snapshot/:id", api.GetSnapshotById)
			dataGroup.POST("/snapshot/:id/image", api.CreateImageBySnapshot)
			dataGroup.POST("/snapshot/:id/replica", api.CreateReplicaBySnapshot)
			dataGroup.POST("/snapshot/:id/rollback", api.RollbackSnapshot)
			dataGroup.DELETE("/snapshot/:id", api.DeleteSnapshot)
		}
	}
	// 日志管理分组
	logGroup := router.Group("/log")
	logGroup.Use(authMiddleware.MiddlewareFunc())
	{
		// 操作日志管理
		logGroup.GET("/record", api.GetLogRecord)
	}
	// 脚本管理分组
	scriptGroup := router.Group("/script")
	scriptGroup.Use(authMiddleware.MiddlewareFunc())
	{
		// 浏览脚本列表
		scriptGroup.GET("/browse", api.GetScripts)
		// 上传脚本
		scriptGroup.POST("/upload", api.UploadScript)
		// 下载脚本[这里不设置权限，否则浏览器无法自动下载]
		router.GET("/script/:id/download", api.DownloadScript)
		// 查看脚本内容
		scriptGroup.GET("/:id/content", api.GetScriptContent)
		// 删除脚本
		scriptGroup.DELETE("/:id/delete", api.DeleteScript)
		//
		scriptGroup.GET("/replica/getFile", api.ViewFile)

		scriptGroup.POST("/metaCompare", api.MetaCompare)
	}
	// 服务器管理
	serverGroup := router.Group("/server")
	serverGroup.Use(authMiddleware.MiddlewareFunc())
	{
		// 获取平台统计信息
		serverGroup.GET("/dashboard", api.GetDashboard)
		// 获取服务器状态信息
		serverGroup.GET("/system", api.GetServerInfo)
		// 获取ceph集群信息
		serverGroup.GET("/ceph", api.GetCephInfo)
	}

	return router
}
